[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "seismic-classifier"
version = "0.1.0"
description = "Real-time seismic event classification using machine learning"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Seismic AI Team", email = "team@seismic-ai.example.com" }]
maintainers = [
    { name = "Seismic AI Team", email = "team@seismic-ai.example.com" },
]
keywords = [
    "seismology",
    "earthquake",
    "machine-learning",
    "classification",
    "real-time",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "obspy>=1.4.0",
    "numpy>=1.21.0",
    "scipy>=1.9.0",
    "scikit-learn>=1.3.0",
    "tensorflow>=2.13.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "dash>=2.11.0",
    "dash-bootstrap-components>=1.4.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "asyncio-throttle>=1.0.0",
    "aiohttp>=3.8.0",
    "tqdm>=4.65.0",
    "joblib>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "safety>=2.3.0",
    "bandit>=1.7.0",
]
docs = ["sphinx>=7.0.0", "sphinx-rtd-theme>=1.3.0", "myst-parser>=2.0.0"]
jupyter = ["jupyter>=1.0.0", "ipykernel>=6.25.0", "ipywidgets>=8.0.0"]

[project.scripts]
seismic-train = "seismic_classifier.cli:train_command"
seismic-classify = "seismic_classifier.cli:classify_command"
seismic-dashboard = "seismic_classifier.cli:dashboard_command"

[project.urls]
Homepage = "https://github.com/your-username/seismic-classifier"
Repository = "https://github.com/your-username/seismic-classifier"
Documentation = "https://seismic-classifier.readthedocs.io"
"Bug Tracker" = "https://github.com/your-username/seismic-classifier/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
per-file-ignores = ["__init__.py:F401"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["obspy.*", "plotly.*", "dash.*", "dash_bootstrap_components.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]
